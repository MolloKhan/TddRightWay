diff --git a/config/services_test.yaml b/config/services_test.yaml
new file mode 100644
index 0000000..f295d44
--- /dev/null
+++ b/config/services_test.yaml
@@ -0,0 +1,8 @@
+services:
+    # default configuration for services in *this* file
+    _defaults:
+        autowire: true      # Automatically injects dependencies in your services.
+        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
+
+    App\Mailer\PlayerMailerDebugDecorator:
+        decorates: App\Mailer\PlayerMailer
\ No newline at end of file
diff --git a/src/Controller/DefaultController.php b/src/Controller/DefaultController.php
index 811231d..69f561f 100644
--- a/src/Controller/DefaultController.php
+++ b/src/Controller/DefaultController.php
@@ -5,6 +5,7 @@ namespace App\Controller;
 use App\Mailer\PlayerMailer;
 use App\Repository\PlayerRepository;
 use App\Service\PlayerNotifier;
+use App\Service\TopPlayerService;
 use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Response;
 use Symfony\Component\Routing\Annotation\Route;
@@ -14,7 +15,7 @@ class DefaultController extends AbstractController
     /**
      * @Route("/", name="homepage")
      */
-    public function homepage(): Response
+    public function homepage(TopPlayerService $topPlayerService): Response
     {
         return $this->render('homepage.html.twig');
     }
diff --git a/src/Mailer/PlayerMailerDebugDecorator.php b/src/Mailer/PlayerMailerDebugDecorator.php
new file mode 100644
index 0000000..24034b5
--- /dev/null
+++ b/src/Mailer/PlayerMailerDebugDecorator.php
@@ -0,0 +1,22 @@
+<?php
+
+namespace App\Mailer;
+
+use App\Entity\Player;
+
+class PlayerMailerDebugDecorator extends PlayerMailer
+{
+    private int $sentEmails = 0;
+
+    public function sendTopPlayerEmail(Player $player)
+    {
+        $this->sentEmails++;
+
+        parent::sendTopPlayerEmail($player);
+    }
+
+    public function getSentEmails(): int
+    {
+        return $this->sentEmails;
+    }
+}
diff --git a/src/Service/TopPlayerService.php b/src/Service/TopPlayerService.php
index 526efeb..161280a 100644
--- a/src/Service/TopPlayerService.php
+++ b/src/Service/TopPlayerService.php
@@ -10,13 +10,13 @@ use Doctrine\ORM\EntityManagerInterface;
 class TopPlayerService
 {
     private PlayerRepository $playerRepository;
-    private PlayerMailer $playerMailerService;
+    private PlayerMailer $playerMailer;
     private EntityManagerInterface $entityManager;
 
-    public function __construct(PlayerRepository $playerRepository, PlayerMailer $playerMailerService, EntityManagerInterface $entityManager)
+    public function __construct(PlayerRepository $playerRepository, PlayerMailer $playerMailer, EntityManagerInterface $entityManager)
     {
         $this->playerRepository = $playerRepository;
-        $this->playerMailerService = $playerMailerService;
+        $this->playerMailer = $playerMailer;
         $this->entityManager = $entityManager;
     }
 
@@ -39,7 +39,7 @@ class TopPlayerService
         }
 
         if ($this->arePlayersEquals($firstTopPlayer, $secondTopPlayer) && $this->arePlayersEquals($secondTopPlayer, $thirdTopPlayer)) {
-            $this->playerMailerService->sendTopPlayerEmail($firstTopPlayer);
+            $this->playerMailer->sendTopPlayerEmail($firstTopPlayer);
         }
     }
 
diff --git a/tests/Repository/PlayerRepositoryTest.php b/tests/Repository/PlayerRepositoryTest.php
index ec1a89a..b3af3db 100644
--- a/tests/Repository/PlayerRepositoryTest.php
+++ b/tests/Repository/PlayerRepositoryTest.php
@@ -5,8 +5,8 @@ namespace App\Tests\Repository;
 use App\Entity\GameResult;
 use App\Entity\Player;
 use App\Repository\PlayerRepository;
+use App\Tests\WebTestCase;
 use Doctrine\ORM\EntityManagerInterface;
-use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
 
 class PlayerRepositoryTest extends WebTestCase
 {
@@ -61,37 +61,6 @@ class PlayerRepositoryTest extends WebTestCase
         $this->assertPositionAndScore($p4, 4, 1, $scoreboard);
         $this->assertPositionAndScore($p5, 5, 1, $scoreboard);
     }
-    
-    private function getEntityManager(): EntityManagerInterface
-    {
-        return self::getContainer()->get(EntityManagerInterface::class);
-    }
-
-    private function createPlayer(string $nickname): Player
-    {
-        $player = new Player($nickname);
-        $this->getEntityManager()->persist($player);
-
-        return $player;
-    }
-
-    private function createGameResult(Player $player, bool $victory): GameResult
-    {
-        $gameResult = new GameResult($player, $victory);
-        $this->getEntityManager()->persist($gameResult);
-
-        return $gameResult;
-    }
-
-    private function createPlayerWithVictories(string $nickname, int $quantity = 1): Player
-    {
-        $player = $this->createPlayer($nickname);
-        for ($i = 0; $i < $quantity; $i++) {
-            $this->createGameResult($player, true);
-        }
-
-        return $player;
-    }
 
     private function assertPositionAndScore(Player $p2, int $position, int $score, $scoreboard): void
     {
diff --git a/tests/Service/TopPlayerServiceTest.php b/tests/Service/TopPlayerServiceTest.php
index 2ea2134..57d1551 100644
--- a/tests/Service/TopPlayerServiceTest.php
+++ b/tests/Service/TopPlayerServiceTest.php
@@ -4,12 +4,13 @@ namespace App\Tests\Service;
 
 use App\Entity\Player;
 use App\Mailer\PlayerMailer;
+use App\Mailer\PlayerMailerDebugDecorator;
 use App\Repository\PlayerRepository;
 use App\Service\TopPlayerService;
+use App\Tests\WebTestCase;
 use Doctrine\ORM\EntityManagerInterface;
-use PHPUnit\Framework\TestCase;
 
-class TopPlayerServiceTest extends TestCase
+class TopPlayerServiceTest extends WebTestCase
 {
     /**
      * @var PlayerRepository|\PHPUnit\Framework\MockObject\MockObject
@@ -111,7 +112,33 @@ class TopPlayerServiceTest extends TestCase
 
         self::assertEquals(2, $topPlayer->getHonorPoints());
     }
-    
+
+    public function testIntegration()
+    {
+        self::bootKernel();
+
+        $topPlayer = $this->createPlayer('Player 1');
+        $threeDaysAgoVictory = $this->createGameResult($topPlayer, true);
+        $threeDaysAgoVictory->setCreatedAt(new \DateTimeImmutable('-3 days'));
+
+        $twoDaysAgoVictory = $this->createGameResult($topPlayer, true);
+        $twoDaysAgoVictory->setCreatedAt(new \DateTimeImmutable('-2 days'));
+
+        $oneDaysAgoVictory = $this->createGameResult($topPlayer, true);
+        $oneDaysAgoVictory->setCreatedAt(new \DateTimeImmutable('-1 days'));
+
+        $this->getEntityManager()->flush();
+
+        $topPlayerService = self::getContainer()->get(TopPlayerService::class);
+        $topPlayerService->reward();
+
+        self::assertEquals(2, $topPlayer->getHonorPoints());
+
+        /** @var PlayerMailerDebugDecorator $playerMailer */
+        $playerMailer = self::getContainer()->get(PlayerMailer::class);
+        self::assertEquals(1, $playerMailer->getSentEmails());
+    }
+
     private function reward(): void
     {
         $topPlayerService = new TopPlayerService($this->playerRepositoryMock, $this->playerMailerServiceMock, $this->entityManagerMock);
diff --git a/tests/WebTestCase.php b/tests/WebTestCase.php
new file mode 100644
index 0000000..25a7d49
--- /dev/null
+++ b/tests/WebTestCase.php
@@ -0,0 +1,42 @@
+<?php
+
+namespace App\Tests;
+
+use App\Entity\GameResult;
+use App\Entity\Player;
+use Doctrine\ORM\EntityManagerInterface;
+use Symfony\Bundle\FrameworkBundle\Test\WebTestCase as BaseWebTestCase;
+
+class WebTestCase extends BaseWebTestCase
+{
+    protected function createPlayerWithVictories(string $nickname, int $quantity = 1): Player
+    {
+        $player = $this->createPlayer($nickname);
+        for ($i = 0; $i < $quantity; $i++) {
+            $this->createGameResult($player, true);
+        }
+
+        return $player;
+    }
+
+    protected function createPlayer(string $nickname): Player
+    {
+        $player = new Player($nickname);
+        $this->getEntityManager()->persist($player);
+
+        return $player;
+    }
+
+    protected function createGameResult(Player $player, bool $victory): GameResult
+    {
+        $gameResult = new GameResult($player, $victory);
+        $this->getEntityManager()->persist($gameResult);
+
+        return $gameResult;
+    }
+
+    protected function getEntityManager(): EntityManagerInterface
+    {
+        return self::getContainer()->get(EntityManagerInterface::class);
+    }
+}
