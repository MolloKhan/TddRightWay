diff --git a/tests/Service/TopPlayerServiceTest.php b/tests/Service/TopPlayerServiceTest.php
index 53fb2bc..8ed354e 100644
--- a/tests/Service/TopPlayerServiceTest.php
+++ b/tests/Service/TopPlayerServiceTest.php
@@ -10,34 +10,45 @@ use PHPUnit\Framework\TestCase;
 
 class TopPlayerServiceTest extends TestCase
 {
-    public function testSetup()
+    /**
+     * @var PlayerRepository|\PHPUnit\Framework\MockObject\MockObject
+     */
+    private $playerRepositoryMock;
+
+    /**
+     * @var PlayerMailer|\PHPUnit\Framework\MockObject\MockObject
+     */
+    private $playerMailerServiceMock;
+
+    /**
+     * @var EntityManagerInterface|\PHPUnit\Framework\MockObject\MockObject
+     */
+    private $entityManagerMock;
+
+    protected function setUp(): void
     {
-        // Dummy "Test Double"
-        $playerRepositoryMock = $this->createMock(PlayerRepository::class);
-        $playerMailerServiceMock = $this->createMock(PlayerMailer::class);
-        $entityManagerMock = $this->createMock(EntityManagerInterface::class);
-
-        $topPlayerService = new TopPlayerService($playerRepositoryMock, $playerMailerServiceMock, $entityManagerMock);
-
-        self::assertTrue(true);
+        $this->playerRepositoryMock = $this->createMock(PlayerRepository::class);
+        $this->playerMailerServiceMock = $this->createMock(PlayerMailer::class);
+        $this->entityManagerMock = $this->createMock(EntityManagerInterface::class);
     }
 
     public function testReward_zeroTopPlayersFound()
     {
-        $playerRepositoryMock = $this->createMock(PlayerRepository::class);
-        $playerMailerServiceMock = $this->createMock(PlayerMailer::class);
-        $entityManagerMock = $this->createMock(EntityManagerInterface::class);
-
-        $playerRepositoryMock->expects($this->atLeastOnce())
+        $this->playerRepositoryMock->expects($this->atLeastOnce())
             ->method('findTopPlayerForDay');
 
-        $playerMailerServiceMock->expects($this->never())
+        $this->playerMailerServiceMock->expects($this->never())
             ->method('sendTopPlayerEmail');
 
-        $entityManagerMock->expects($this->never())
+        $this->entityManagerMock->expects($this->never())
             ->method('flush');
 
-        $topPlayerService = new TopPlayerService($playerRepositoryMock, $playerMailerServiceMock, $entityManagerMock);
+        $this->reward();
+    }
+
+    private function reward(): void
+    {
+        $topPlayerService = new TopPlayerService($this->playerRepositoryMock, $this->playerMailerServiceMock, $this->entityManagerMock);
         $topPlayerService->reward();
     }
 }
