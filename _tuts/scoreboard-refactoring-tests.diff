diff --git a/tests/Repository/PlayerRepositoryTest.php b/tests/Repository/PlayerRepositoryTest.php
index b1da80a..ec1a89a 100644
--- a/tests/Repository/PlayerRepositoryTest.php
+++ b/tests/Repository/PlayerRepositoryTest.php
@@ -8,13 +8,6 @@ use App\Repository\PlayerRepository;
 use Doctrine\ORM\EntityManagerInterface;
 use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
 
-// ZOMBIE (ZERO, ONE, MANY, BOUNDARIES, INTERFACES, EXCEPTIONS)
-// scoreboard with zero players
-// scoreboard with one player
-// scoreboard with many players
-// scoreboard shows no more than 5 players
-// scoreboard ordered by highest score
-// scoreboard is date range constrained to 15 days
 class PlayerRepositoryTest extends WebTestCase
 {
     private PlayerRepository $repository;
@@ -33,39 +26,10 @@ class PlayerRepositoryTest extends WebTestCase
         self::assertEmpty($scoreboard);
     }
 
-    public function testGetScoreboard_withManyPlayer()
-    {
-        $player = $this->createPlayer('player');
-        $player2 = $this->createPlayer('player2');
-        $gameResult = $this->createGameResult($player, true);
-        $gameResult2 = $this->createGameResult($player2, true);
-
-        $this->getEntityManager()->flush();
-
-        $scoreboard = $this->repository->getScoreboard();
-
-        self::assertCount(2, $scoreboard);
-    }
-
-    public function testGetScoreboard_limitsTo5Players()
-    {
-        $this->createPlayerWithVictory('player1');
-        $this->createPlayerWithVictory('player2');
-        $this->createPlayerWithVictory('player3');
-        $this->createPlayerWithVictory('player4');
-        $this->createPlayerWithVictory('player5');
-        $this->createPlayerWithVictory('player6');
-
-        $this->getEntityManager()->flush();
-
-        $scoreboard = $this->repository->getScoreboard();
-
-        self::assertCount(5, $scoreboard);
-    }
-
     public function testGetScoreBoard_ignoresRecordsOlderThan15Days()
     {
-        $this->createPlayerWithVictory('player1');
+        $this->createPlayerWithVictories('player1');
+
         $p2 = $this->createPlayer('p2');
         $gameResult = $this->createGameResult($p2, true);
         $gameResult->setCreatedAt(new \DateTimeImmutable('-16 days'));
@@ -79,34 +43,23 @@ class PlayerRepositoryTest extends WebTestCase
 
     public function testGetScoreBoard_top5_integration()
     {
-        $p1 = $this->createPlayerWithVictory('player1');
-
-        $p2 = $this->createPlayerWithVictory('player2');
-        $this->createGameResult($p2, true);
-        $this->createGameResult($p2, true);
-
-        $p3 = $this->createPlayerWithVictory('player3');
-        $this->createGameResult($p3, true);
-
-        $p4 = $this->createPlayerWithVictory('player4');
-        $p5 = $this->createPlayerWithVictory('player5');
-        $p6 = $this->createPlayerWithVictory('player6');
+        $p1 = $this->createPlayerWithVictories('player1');
+        $p2 = $this->createPlayerWithVictories('player2', 3);
+        $p3 = $this->createPlayerWithVictories('player3', 2);
+        $p4 = $this->createPlayerWithVictories('player4');
+        $p5 = $this->createPlayerWithVictories('player5');
+        $p6 = $this->createPlayerWithVictories('player6');
 
         $this->getEntityManager()->flush();
 
         $scoreboard = $this->repository->getScoreboard();
 
         self::assertCount(5, $scoreboard);
-        self::assertSame($p2, $scoreboard[0][0]);
-        self::assertEquals(3, $scoreboard[0]['score']);
-        self::assertSame($p3, $scoreboard[1][0]);
-        self::assertEquals(2, $scoreboard[1]['score']);
-        self::assertSame($p1, $scoreboard[2][0]);
-        self::assertEquals(1, $scoreboard[2]['score']);
-        self::assertSame($p4, $scoreboard[3][0]);
-        self::assertEquals(1, $scoreboard[3]['score']);
-        self::assertSame($p5, $scoreboard[4][0]);
-        self::assertEquals(1, $scoreboard[4]['score']);
+        $this->assertPositionAndScore($p2, 1, 3, $scoreboard);
+        $this->assertPositionAndScore($p3, 2, 2, $scoreboard);
+        $this->assertPositionAndScore($p1, 3, 1, $scoreboard);
+        $this->assertPositionAndScore($p4, 4, 1, $scoreboard);
+        $this->assertPositionAndScore($p5, 5, 1, $scoreboard);
     }
     
     private function getEntityManager(): EntityManagerInterface
@@ -130,11 +83,20 @@ class PlayerRepositoryTest extends WebTestCase
         return $gameResult;
     }
 
-    private function createPlayerWithVictory(string $nickname): Player
+    private function createPlayerWithVictories(string $nickname, int $quantity = 1): Player
     {
         $player = $this->createPlayer($nickname);
-        $this->createGameResult($player, true);
+        for ($i = 0; $i < $quantity; $i++) {
+            $this->createGameResult($player, true);
+        }
 
         return $player;
     }
+
+    private function assertPositionAndScore(Player $p2, int $position, int $score, $scoreboard): void
+    {
+        $position--;
+        self::assertSame($p2, $scoreboard[$position][0]);
+        self::assertEquals($score, $scoreboard[$position]['score']);
+    }
 }
