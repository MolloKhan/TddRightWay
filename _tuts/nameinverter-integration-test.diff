diff --git a/src/NameInverter.php b/src/NameInverter.php
index 3c62c25..3a9a96a 100644
--- a/src/NameInverter.php
+++ b/src/NameInverter.php
@@ -10,24 +10,48 @@ class NameInverter
             return '';
         }
 
-        $nameParts = preg_split('/\s+/', trim($name));
+        return $this->formatName(
+            $this->removeHonorifics(
+                $this->splitBySpaces($name)
+            )
+        );
+    }
+
+    private function splitBySpaces(string $name): array
+    {
+        return preg_split('/\s+/', trim($name));
+    }
 
+    private function removeHonorifics(array $nameParts): array
+    {
         if (count($nameParts) > 1 && $this->isHonorific($nameParts[0])) {
             array_shift($nameParts);
         }
 
+        return $nameParts;
+    }
+
+    private function isHonorific(string $word): bool
+    {
+        return preg_match('/mr|mrs|ms/', str_replace('.', '', strtolower($word)));
+    }
+
+    private function formatName(array $nameParts): string
+    {
         if (count($nameParts) === 1) {
             return $nameParts[0];
         }
 
-        $postNominals = $this->getPostNominals($nameParts);
-
-        return trim(sprintf('%s, %s %s', $nameParts[1], $nameParts[0], $postNominals));
+        return $this->formatNameWithPostNominals($nameParts);
     }
 
-    private function isHonorific(string $word): bool
+    private function formatNameWithPostNominals(array $nameParts): string
     {
-        return preg_match('/mr|mrs|ms/', str_replace('.', '', strtolower($word)));
+        return trim(sprintf('%s, %s %s',
+            $nameParts[1],
+            $nameParts[0],
+            $this->getPostNominals($nameParts)
+        ));
     }
 
     private function getPostNominals(array $nameParts): string
diff --git a/tests/NameInverterTest.php b/tests/NameInverterTest.php
index 0b8e58d..635cb17 100644
--- a/tests/NameInverterTest.php
+++ b/tests/NameInverterTest.php
@@ -59,7 +59,12 @@ class NameInverterTest extends TestCase
         $this->assertInvertedName('Diego Aguiar BS.', 'Aguiar, Diego BS.');
         $this->assertInvertedName('Diego Aguiar BS. Phd.', 'Aguiar, Diego BS. Phd.');
     }
-    
+
+    public function testInvert_integration()
+    {
+        $this->assertInvertedName('  Mr.   Diego   Aguiar  Bs.  Phd. III', 'Aguiar, Diego Bs. Phd. III');
+    }
+
     private function assertInvertedName(string $name, string $invertedName): void
     {
         self::assertEquals($invertedName, $this->nameInverter->invert($name));
