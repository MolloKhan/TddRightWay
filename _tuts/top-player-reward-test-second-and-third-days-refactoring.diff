diff --git a/src/Service/TopPlayerService.php b/src/Service/TopPlayerService.php
index f0f6773..526efeb 100644
--- a/src/Service/TopPlayerService.php
+++ b/src/Service/TopPlayerService.php
@@ -2,6 +2,7 @@
 
 namespace App\Service;
 
+use App\Entity\Player;
 use App\Mailer\PlayerMailer;
 use App\Repository\PlayerRepository;
 use Doctrine\ORM\EntityManagerInterface;
@@ -25,16 +26,25 @@ class TopPlayerService
         $secondTopPlayer = $this->playerRepository->findTopPlayerForDay('-2');
         $thirdTopPlayer = $this->playerRepository->findTopPlayerForDay('-3');
 
-        if ($firstTopPlayer && $firstTopPlayer === $secondTopPlayer) {
+        if ($this->arePlayersEquals($firstTopPlayer, $secondTopPlayer)) {
             $firstTopPlayer->addHonorPoints(1);
 
             $this->entityManager->flush();
         }
 
-        if ($secondTopPlayer && $secondTopPlayer === $thirdTopPlayer) {
+        if ($this->arePlayersEquals($secondTopPlayer, $thirdTopPlayer)) {
             $secondTopPlayer->addHonorPoints(1);
 
             $this->entityManager->flush();
         }
+
+        if ($this->arePlayersEquals($firstTopPlayer, $secondTopPlayer) && $this->arePlayersEquals($secondTopPlayer, $thirdTopPlayer)) {
+            $this->playerMailerService->sendTopPlayerEmail($firstTopPlayer);
+        }
+    }
+
+    private function arePlayersEquals(?Player $firstTopPlayer, ?Player $secondTopPlayer): bool
+    {
+        return $firstTopPlayer && $firstTopPlayer === $secondTopPlayer;
     }
 }
diff --git a/tests/Service/TopPlayerServiceTest.php b/tests/Service/TopPlayerServiceTest.php
index 7f39c5c..2ea2134 100644
--- a/tests/Service/TopPlayerServiceTest.php
+++ b/tests/Service/TopPlayerServiceTest.php
@@ -89,6 +89,29 @@ class TopPlayerServiceTest extends TestCase
         self::assertEquals(1, $topPlayer->getHonorPoints());
     }
 
+    public function testReward_topPlayerFor3DaysInRow()
+    {
+        $topPlayer = new Player('player 1');
+        $this->playerRepositoryMock->expects($this->atLeastOnce())
+            ->method('findTopPlayerForDay')
+            ->willReturnMap([
+                ['-1', $topPlayer],
+                ['-2', $topPlayer],
+                ['-3', $topPlayer]
+            ]);
+
+        $this->playerMailerServiceMock->expects($this->atLeastOnce())
+            ->method('sendTopPlayerEmail')
+            ->with($topPlayer);
+
+        $this->entityManagerMock->expects($this->atLeastOnce())
+            ->method('flush');
+
+        $this->reward();
+
+        self::assertEquals(2, $topPlayer->getHonorPoints());
+    }
+    
     private function reward(): void
     {
         $topPlayerService = new TopPlayerService($this->playerRepositoryMock, $this->playerMailerServiceMock, $this->entityManagerMock);
