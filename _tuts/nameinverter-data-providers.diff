diff --git a/_tuts/steps.json b/_tuts/steps.json
index 30a235c..c05fbf6 100644
--- a/_tuts/steps.json
+++ b/_tuts/steps.json
@@ -66,13 +66,13 @@
             "description": null
         },
         {
-            "id": "bowlingkata-start",
-            "name": "BowlingKata: Start",
+            "id": "nameinverter-data-providers",
+            "name": "NameInverter: data providers",
             "description": null
         },
         {
-            "id": "nameinverter-data-providers",
-            "name": "NameInverter: data providers",
+            "id": "bowlingkata-start",
+            "name": "BowlingKata: Start",
             "description": null
         },
         {
diff --git a/tests/NameInverterTest.php b/tests/NameInverterTest.php
index 635cb17..c6cb976 100644
--- a/tests/NameInverterTest.php
+++ b/tests/NameInverterTest.php
@@ -40,18 +40,18 @@ class NameInverterTest extends TestCase
     {
         $this->assertInvertedName('Diego Aguiar', 'Aguiar, Diego');
     }
-    
+
     public function testInvert_givenFirstLastWithSpaces_returnLastFirstWithoutSpaces()
     {
         $this->assertInvertedName('  Diego  Aguiar  ', 'Aguiar, Diego');
     }
 
-    public function testInvert_ignoreHonorifics()
+    /**
+     * @dataProvider ignoreHonorificsProvider
+     */
+    public function testInvert_ignoreHonorifics($name, $expectedName)
     {
-        $this->assertInvertedName('Mr. Diego Aguiar', 'Aguiar, Diego');
-        $this->assertInvertedName('Mrs. Diego Aguiar', 'Aguiar, Diego');
-        $this->assertInvertedName('Ms. Diego Aguiar', 'Aguiar, Diego');
-        $this->assertInvertedName('mr Diego Aguiar', 'Aguiar, Diego');
+        $this->assertInvertedName($name, $expectedName);
     }
 
     public function testInvert_postNominals_stayAtEnd()
@@ -65,6 +65,18 @@ class NameInverterTest extends TestCase
         $this->assertInvertedName('  Mr.   Diego   Aguiar  Bs.  Phd. III', 'Aguiar, Diego Bs. Phd. III');
     }
 
+    public function ignoreHonorificsProvider(): iterable
+    {
+        return [
+            'Simple Honorific' => ['Mr. Diego Aguiar', 'Aguiar, Diego'],
+            ['Mrs. Diego Aguiar', 'Aguiar, Diego'],
+            ['Ms. Diego Aguiar', 'Aguiar, Diego'],
+            ['mr Diego Aguiar', 'Aguiar, Diego'],
+        ];
+
+//         yield 'Simple Honorific' => ['Mr. Diego Aguiar', 'Aguiar, Diego'];
+    }
+
     private function assertInvertedName(string $name, string $invertedName): void
     {
         self::assertEquals($invertedName, $this->nameInverter->invert($name));
